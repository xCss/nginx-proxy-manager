name: Docker Image CI

on:
  push:
    branches:
      - master

jobs:
  build_docker:
    runs-on: ubuntu-latest
    env: 
      IMAGE: nginx-proxy-manager
      BUILD_NUMBER: 2
    steps:
      - uses: actions/checkout@v2
      # 设置buildx
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      # 配置缓存加快编译速度
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-yarn-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ env.cache-name }}-
      - name: Get Version
        id: vers
        run: echo "::set-output name=v::$(cat .version)"
      - name: Install Utils
        run: |
          sudo apt-get install moreutils -y

      # 设置version
      - name: Set Versions 
        run: |
          cat frontend/package.json | jq --arg BUILD_VERSION "${{steps.vers.outputs.v}}" '.version = $BUILD_VERSION' | sponge frontend/package.json
          echo -e "\\E[1;36mFrontend Version is:\\E[1;33m $(cat frontend/package.json | jq -r .version)\\E[0m"
          cat backend/package.json | jq --arg BUILD_VERSION "${{steps.vers.outputs.v}}" '.version = $BUILD_VERSION' | sponge backend/package.json
          echo -e "\\E[1;36mBackend Version is:\\E[1;33m  $(cat backend/package.json | jq -r .version)\\E[0m"
          sed -i -E "s/(version-)[0-9]+\\.[0-9]+\\.[0-9]+(-green)/\\1${{steps.vers.outputs.v}}\\2/" README.md
      
      - name: Build Frontend
        run: scripts/frontend-build
        shell: bash

      - name: Build Backend
        run: |
          echo 'Checking Syntax ...'
          docker run --rm \\
            -v "$(pwd)/backend:/app" \\
            -v "$(pwd)/global:/app/global" \\
            -w /app \\
            node:latest \\
            sh -c "yarn install && yarn eslint . && rm -rf node_modules"
          echo 'Docker Build ...'
          docker build --pull --no-cache --squash --compress \\
            -t "$IMAGE:ci-$BUILD_NUMBER" \\
            -f docker/Dockerfile \\
            --build-arg TARGETPLATFORM=linux/amd64 \\
            --build-arg BUILDPLATFORM=linux/amd64 \\
            --build-arg BUILD_VERSION="${{steps.vers.outputs.v}}" \\
            --build-arg BUILD_DATE="$(date '+%Y-%m-%d %T %Z')" \\
            .
